        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Constructor sets an empty board and specifies it is X's turn first
function _ZN14TicTacToeBoardC2Ev called 15 returned 100% blocks executed 100%
       15:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
       15:   10:  turn = X;
       60:   11:  for(int i=0; i<BOARDSIZE; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      180:   12:    for(int j=0; j<BOARDSIZE; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      135:   13:      board[i][j] = Blank;
       15:   14:}
        -:   15:
        -:   16:/**
        -:   17: * Switches turn member variable to represent whether it's X's or O's turn
        -:   18: * and returns whose turn it is
        -:   19:**/
function _ZN14TicTacToeBoard10toggleTurnEv called 11 returned 100% blocks executed 100%
       11:   20:Piece TicTacToeBoard::toggleTurn()
        -:   21:{
       11:   22:  if(turn == X){
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        8:   23:    turn = O;
        8:   24:    return O;
        -:   25:  }
        -:   26:  else{
        3:   27:    turn = X;
        3:   28:    return X;
        -:   29:  }
        -:   30:}
        -:   31:
        -:   32:/**
        -:   33: * Places the piece of the current turn on the board, returns what
        -:   34: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   35: * NOT allow to place a piece in a location where there is already a piece.
        -:   36: * In that case, placePiece just returns what is already at that location. 
        -:   37: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   38: * is over, no more pieces can be placed so attempting to place a piece
        -:   39: * should neither change the board nor change whose turn it is.
        -:   40:**/ 
function _ZN14TicTacToeBoard10placePieceEii called 7 returned 100% blocks executed 100%
        7:   41:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   42:{
        7:   43:  Piece spot = getPiece(row, column);
call    0 returned 100%
        7:   44:  if(spot == Blank){
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5:   45:    board[row][column] = turn;
        5:   46:    return turn;
        -:   47:  }
        -:   48:  else{
        2:   49:    return spot;
        -:   50:  }
        -:   51:  
        -:   52:}
        -:   53:
        -:   54:/**
        -:   55: * Returns what piece is at the provided coordinates, or Blank if there
        -:   56: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   57:**/
function _ZN14TicTacToeBoard8getPieceEii called 10 returned 100% blocks executed 100%
       10:   58:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   59:{
       10:   60:  return board[row][column];
        -:   61:}
        -:   62:
        -:   63:/**
        -:   64: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   65: * is not over, or Blank if the board is filled and no one has won.
        -:   66:**/
function _ZN14TicTacToeBoard9getWinnerEv called 1 returned 100% blocks executed 100%
        1:   67:Piece TicTacToeBoard::getWinner()
        -:   68:{
        1:   69:  return Invalid;
        -:   70:}
